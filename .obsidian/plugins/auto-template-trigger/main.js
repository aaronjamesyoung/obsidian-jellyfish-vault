/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoTemplatePromptPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var AutoTemplatePromptPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isReady = false;
  }
  async onload() {
    this.app.workspace.onLayoutReady(() => {
      this.isReady = true;
    });
    this.registerEvent(
      this.app.workspace.on("file-open", async (file) => {
        if (!file) {
          return;
        }
        const shouldTriggerPrompt = await this.shouldTriggerTemplatePrompt(file);
        if (shouldTriggerPrompt) {
          this.insertTemplate();
        }
      })
    );
  }
  async shouldTriggerTemplatePrompt(file) {
    var _a;
    if (!this.isReady || !this.isMarkdown(file)) {
      return false;
    }
    const isFileNew = file.stat.ctime === file.stat.mtime;
    const isFileEmpty = file.stat.size === 0;
    if (!isFileNew || !isFileEmpty) {
      return false;
    }
    const isFileFocused = ((_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) === file.path;
    if (!isFileFocused) {
      return false;
    }
    const templatesFolder = await this.getTemplatesFolder();
    if (!templatesFolder) {
      return false;
    }
    const isFileInTemplatesFolder = file.path.startsWith(templatesFolder);
    if (isFileInTemplatesFolder) {
      return false;
    }
    return true;
  }
  async getTemplatesFolder() {
    const templatesSettings = await this.app.vault.readConfigJson("templates");
    return templatesSettings == null ? void 0 : templatesSettings.folder;
  }
  isMarkdown(file) {
    return file.path.endsWith(".md");
  }
  insertTemplate() {
    this.app.commands.executeCommandById("insert-template");
  }
};
